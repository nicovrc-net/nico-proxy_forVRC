# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master", "v2" ]
  pull_request:
    branches: [ "master", "v0", "v1", "v2" ]

jobs:
  build-17:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    - name: Build with Gradle Wrapper
      run: ./gradlew shadowJar
  build-21:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle Wrapper
        run: ./gradlew shadowJar
  autotest:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create config.yml
        run: |
          cat <<EOF > config.yml
          # 受付ポート (HTTP/UDP共通)
          Port: 25252
          # ログをRedisに書き出すときはtrue
          LogToRedis: false
          
          # HTTPで受付する場合はtrue
          HTTPServer: true
          # UDPで受付する場合はtrue
          UDPServer: false
          
          # HTTPサーバー/UDPサーバーの受付ログをDiscordへWebhookで配信するかどうか
          DiscordWebhook: false
          # DiscordのWebhookのURL
          DiscordWebhookURL: ""
          
          # ログを強制的に書き出すときの合言葉
          # 普通に漏れると危ないので厳重管理すること。
          WriteLogPass: 'github_actions_test'
          
          # 他に処理鯖がある場合はそのリストを「IP:受付ポート」形式で記載する
          # (HTTP通信用を1つ、処理鯖(UDP通信)はn個という想定)
          ServerList:
          #  - "127.0.0.1:25252"
          
          # ツイキャスの設定
          # https://twitcasting.tv/developer.phpでAPIキーを取得してください
          ClientID: ""
          ClientSecret: ""
          
          # bilibili変換システム
          BiliBiliSystemIP: "127.0.0.1"
          
          # ニコ動domand鯖の変換システム
          NicoVideoSystem: "127.0.0.1"
          
          # vimeo変換システム
          VimeoSystemIP: "127.0.0.1"
          
          # Redisの設定(LogToRedisをtrue)にしていない場合は設定不要
          # RedisサーバーIP
          RedisServer: 127.0.0.1
          # Redisサーバーポート
          RedisPort: 6379
          # Redis AUTHパスワード
          # パスワードがない場合は以下の通りに設定してください
          RedisPass: ""
          EOF

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew shadowJar

      - name: Run the application
        run: java -jar build/libs/NicoVideoPlayForVRC-2.0-SNAPSHOT-all.jar &
        shell: bash

      - name: Wait for the application to start
        run: sleep 1

      - name: Check if the application is running and returns 302
        run: |
          HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:25252/?vi=https://www.youtube.com/watch?v=dQw4w9WgXcQ)
          if [ "$HTTP_STATUS" -ne 302 ]; then
            echo "Expected HTTP status 302 but got $HTTP_STATUS"
            exit 1
          fi